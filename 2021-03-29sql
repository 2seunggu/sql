SELECT ename, job
from emp;

CREATE 객체타입 객체명
DROP 객체타입 객체명;

DROP INDEX idx_emp_03;

CREATE INDEX idx_emp_04 ON emp(ename, job);

SELECT *
FROM emp
WHERE job = 'MANAGER'
AND ename LIKE 'C%';

SELECT *
FROM TABLE(DBMS_XPLAN.DISPLAY);

SELECT ROWID, dept.*
FROM dept;

CREATE INDEX idx_dept_01 ON dept (deptno);

select *
from idx_dept_01;

SELECT ename, dname, loc
FROM emp, dept
WHERE emp.deptno = dept.deptno
AND emp.empno = 7788; 

응답성을 중요시 하는것을 OLTP (Online Transaction Processing) 
    --> 전체 시간을 줄이기 위해 사용 (이쪽이 오라클을 쓰는이유)
퍼포먼스를 중요시 하는것을 OLAP (Online Analysis Processing) 라고 한다
                         -> 은행 이자 계산
                         
                         
문제점
저장공간을 많이 차지한다


소수의 데이터를 조회할 때 유리(응답속도가 필요할 때)

Index Access
 index를 사용하는 input/output single block I/O
다량의 데이터를 인덱스로 접근할 경우 속도가 느림(max : 2~3000건)

Table Access
테이블의 모든 데이터를 읽고서 처리를 해야하는 경우 인덱스를 통해 모든 데이터를 테이블로 접근하는 경우보다 빠름
  - I/O 기준이 multi block
  
SELECT TO_CHAR(LAST_DAY(TO_DATE(:yyyymm, 'yyyymm')), 'dd')
FROM dual;

SELECT DECODE(d, 1, iw+1, iw),
        MIN(DECODE(d,l,dt)) sun, MIN(DECODE(d,2,dt))mon,
        MIN(DECODE(d,3,dt)) tue, MIN(DECODE(d,4,dt))wed,
        MIN(DECODE(d,5,dt)) thu, MIN(DECODE(d,6,dt))fri,
        MIN(DECODE(d,7,dt)) sat
FROM
        (SELECT TO_DATE(:YYYYMM, 'YYYYMM') + (LEVEL-1) dt,
                TO_CHAR(TO_DATE(:YYYYMM, 'YYYYMM') + (LEVEL-1), 'D') d,
                TO_CHAR(TO_DATE(:YYYYMM, 'YYYYMM') + (LEVEL-1), 'IW') iw
        FROM dual
        CONNECT BY LEVEL <= TO_CHAR(LAST_DAY(TO_DATE(:YYYYMM, 'YYYYMM')), 'DD'))
GROUP BY DECODE(d, 1, iw+1, iw)
GROUP BY DECODE(d, 1, iw+1, iw);


SELECT DECODE(d, 1, iw+1, iw),
       MIN(DECODE(d, 1, dt)) sun, MIN(DECODE(d, 2, dt)) mon,  
       MIN(DECODE(d, 3, dt)) tue, MIN(DECODE(d, 4, dt)) wed,  
       MIN(DECODE(d, 5, dt)) thu, MIN(DECODE(d, 6, dt)) fri,  
       MIN(DECODE(d, 7, dt)) sat
FROM 
    (SELECT TO_DATE(:YYYYMM, 'YYYYMM') + (LEVEL-1) dt,
            TO_CHAR(TO_DATE(:YYYYMM, 'YYYYMM') + (LEVEL-1), 'D') d ,
            TO_CHAR(TO_DATE(:YYYYMM, 'YYYYMM') + (LEVEL-1), 'IW') iw
    FROM dual
    CONNECT BY LEVEL <= TO_CHAR(LAST_DAY(TO_DATE(:YYYYMM, 'YYYYMM')), 'DD'))
GROUP BY DECODE(d, 1, iw+1, iw)
ORDER BY DECODE(d, 1, iw+1, iw);

계층쿼리 - 데이터의 상하 관계를 나타내는 쿼리(게시판,댓글,조직도)
SELECT empno, ename, mgr
FROM emp;


사용방법 : 1.시작위치를 설정
          2. 행과 행의 연결 조건을 기술
PRIOR - 이전의, 사전의, 이미 읽은 데이터
CONNECT BY 내가 읽은 행의 사번과 = 앞으로 읽을 행의 MGR 컬럼;          
SELECT empno, LPAD(' ', (LEVEL-1)*4)||ename ename, mgr
FROM emp
START WITH empno = 7839
CONNECT BY mgr = PRIOR empno AND deptno = PRIOR deptno;
START WITH mgr IS NULL;


이미 읽음           앞으로 읽어야 함
KING의 사번 = mgr 컬럼의 값이 KING의 사번인 녀석
empno = mgr

SELECT LPAD('TEST', 1*10)
FROM dual;

계층쿼리 방향에 따른 분류
상향식 : 최하위 노드(leaf node)에서 자신의 부모를 방문하는 형태
하향식 : 최상위 노드(root node)에서 모든 자식 노드를 방문하는 형태

상향식 쿼리
SMITH(7369)부터 시작하여 노드의 부모를 따라가는 계층형 쿼리 작성

SELECT empno, LPAD(' ', (LEVEL-1)*4)||ename ename, mgr, level
FROM emp
START WITH empno = 7369
CONNECT BY PRIOR mgr = empno;


상향식 쿼리
smith부터 시작하여 노드의 부모를 따라가는 계층형 쿼리 작성

select *
from dept_h;


최상위 노드부터 리프 노드까지 탐색하는 계층 쿼리 작성
(LPAD를 이용한 시각적 표현까지 포함)
;
SELECT LPAD(' ', (LEVEL-1)*3)||deptnm
FROM dept_h
START WITH p_deptcd Is NULL
CONNECT BY PRIOR deptcd = p_deptcd;

SELECT level, deptcd, LPAD(' ', (LEVEL-1)*4)||deptnm deptnm, p_deptcd
FROM dept_h
START WITH deptcd = 'dept0_02'
CONNECT BY PRIOR deptcd = p_deptcd;

SELECT level, deptcd, LPAD(' ', (LEVEL-1)*4)||deptnm deptnm, p_deptcd
FROM dept_h
START WITH p_deptcd = 'dept0_00'
CONNECT BY PRIOR p_deptcd = deptcd;

select *           --하향주기
from h_sum;

SELECT s_id, LPAD(' ',(level-1)*3) || s_id s_id, VALUE
FROM h_sum
START WITH ps_id Is NULL
CONNECT BY PRIOR s_id = ps_id;
