--customer, cycle, product 테이블을 이용하여 cid=1인 고객이 애음하는 제품중 cid=2인 고객도 애음하는 제품의 애음정보를 조회
SELECT cid, pid, day, cnt
FROM cycle
WHERE cid =1 AND pid IN(SELECT pid
                        FROM cycle
                        WHERE cid = 2);

--customer, cycle, product 테이블을 이용하여 cid=1인 고객이 애음하는 제품중 cid=2인 고객도 애음하는 제품의 애음정보를 조회하고 고객명과 제품명까지 포함하는 쿼리를 작성                    
SELECT *
FROM cycle, customer, product
WHERE cycle.cid =1 
AND cycle.cid = customer.cid
AND cycle.pid = product.pid
AND cycle.pid IN(SELECT pid
           FROM cycle
           WHERE cid = 2);


EXISTS 서브쿼리 연산자 : 단항
IN WHERE 컬럼 : EXPRESSION (값1, 값2, rkqt3 ...)
EXISTS : WHERE EXISTS(서브쿼리)
           ==> 서브쿼리의 실행결과로 조회되는 행이 있으면 TRUE 없으면 FALSE
                EXISTS 연산자와 사용되는 서브쿼리는 상호연관, 비상호연관 서브쿼리 둘다 사용 가능하지만
                행을 제한하기 위해서 상호연관 서브쿼리와 사용되는 경우가 일반적이다.
                
                서브쿼리에서 EXISTS 연산자를 만족하는 행을 하나라도 발견하면 더이상 진행하지 않고 효율적으로 일을 끊어버린다
                서버쿼리가 1000건이라도 10번째 행에서 exists연산을 만족하는 행을 발견하면 나머지 990건정도의 데이터는 확인 안한다
매니저가 존재하는 직원
SELECT *
FROM emp
WHERE mgr != 0;

subquery를 사용하지 않고 작성
SELECT *
FROM emp e
WHERE EXISTS( SELECT empno
              FROM emp m
              WHERE e.mgr = m.empno);
              
SELECT *
FROM emp e
WHERE EXISTS( SELECT 'X'
              FROM emp m
              WHERE e.mgr = m.empno);
                            
SELECT
FROM dual
WHERE EXISTS (SELECT 'X' FROM emp WHERE deptno = 10);

SELECT *
FROM product
WHERE EXISTS( SELECT 'X'
              FROM cycle
              WHERE cid = 1
              AND product.pid = cycle.pid);
              
              
select *
from cycle;

select *
from product


집합 연산
--많이는 안쓰지만 알아두면 좋다

UNION : 수학에서 나오는 일반적인 합집합
UNION ALL : 중복을 허용하는 합집합

행을 위장 - > 위 아래
    위 아래 집합의 COL의 개수와 타입이 일치해야 한다


데이터확장방법

JOIN 열을 확장 -> 양옆
UNION : 합집합 / 중복을 제거
UNION : 중복을 제거하지 않음 UNION 연산자에 비해 속도가 빠르다
INTERSECT : 교집합 : 두 집합의 공통된 부분
MINUS 차집합 : 한 집합에만 속하는 데이터
;

SLELCT empno,ename
FROM emp
WHERE empno IN (7369, 7499);

UNION

SELECT empno, ename, deptno
FROM emp
WHERE empno IN (7369, 7521);

UNION : 합집합 / 중복을 제거
        중복을 제거 로직이 없기 때문에 속도가 빠르다
        합집합 하려는 집합간 중복이 없다는 것을 알고 있을 경우 UNION 연산자보다 UNION ALL 연산자를 쓰는게 더 낫다
        
INTERSECT : 두개의 집합 중 중복되는 부분만 조회

MINUS : 한쪽 집합에서 다른 한쪽 집합을 제외한 나머지 요소들을 반환

SELECT empno, ename
FROM emp
WHERE empno IN(7369, 7499)

MINUS

SELECT empno, ename
FROM emp
WHERE empno IN (7369,7521);

교환법칙 : 집합의 순서에 따라 결과가 달라질 수 있다.

집합연산 특징
1. 집합연산의 결과로 조회되는 데이터의 컬럼 이름은 첫번째 집합의 컬럼을 따른다

SELECT empno e, ename enm
FROM emp
WHERE empno IN (7369,7521)
UNION
SELECT empno, ename
FROM emp
WHERE empno IN (7369,7499);

2. 집합연산의 결과를 정렬하고 싶으면 가장 마지막 집합 뒤에 order by를 기술한다
   개별 집합에 order by를 사용한 경우 에러
   단 order by를 적용한 인라인 뷰를 사용하는 것은 가능

SELECT empno e, ename enm
FROM emp
WHERE empno IN (7369,7521)
-- order by 개별 사용 x
UNION
SELECT empno, ename
FROM emp
WHERE empno IN (7369,7499)
ORDER BY e;

중복이 제거 된다 (예외 union all)

[9i 이전 버전 그룹연산을 하게 되면 기본적으로 오름차순으로 정렬되어나온다.
    이후버전 ==> 정렬을 보장하지 않음
    
DML
  * SELECT
  * 데이터 신규 입력 : INSERT
  * 기존 데이터 수정 : UPDATE
  * 기존 데이터 삭제 : DELETE
  
INSERT 문법
INSERT INTO 테이블명 [{(colum, )}] VALUES ({ value, })

INSERT INTO 테이블명 (컬럼명1, 컬럼명2, 컬럼명3....)
    VALUES(값1, 값2, 값3....)
    
만약 테이블에 존재하는 모든 컬럼에 데이터를 입력하는 경우  컬럼명은 생략 가능하고
값을 기술하는 순서를 테이블에 정의된 컬럼 순서와 일치시킨다

INSERT INTO 테이블명 VALUES (값1, 값2, 값3);


SELECT *
FROM dept;

insert into emp (empno, ename, job) values (100, 'brown', 'ranger');
delete into emp (empno, ename, job) values (100, 'brown', 'ranger');
select *
from emp;

INSERT INTO emp (empno, ename, job, hiredate, sal, comm)
            values(9998, 'sally', 'RANGER', TO_DATE('2021-03-24', 'YYYY-MM-DD'),1000, null );
            
select *
from emp

여러건 한번에 입력하기
INSERT INTO 테이블명
SELECT 쿼리

INSERT INTO dept
SELECT 90, 'DDIT' , '대전' FROM dual UNION ALL
SELECT 80, 'DDITS' , '대전' FROM dual;

select *
from dept ;

ROLLBACK;

SELECT*
FROM emp;

UPDATE : 테이블에 존재하는 기존 데이터의 값을 변경
WHERE 절이 누락 되었는지 확인
WHERE 절이 누락 된 경우 테이블의 모든 행에 대해 업데이트를 진행(싹 다 바뀜)
update 테이블명 set 컬럼명 = 값1, 컬럼명2 = 값2, 컬럼명3 = 값3 , ....
WHERE ;

SELECT *
FROM dept;

부서번호 99번 부서정보를 부서명 = 대덕 it로 loc = 영민빌딩으로 변경
update dept set dname = '대덕IT' , loc = '영민빌딩'
WHERE deptno = 99;