FROM -> [START WITH] -> WHERE -> GROUP BY -> SELECT ORDER BY

SELECT empno, LPAD(' ',(LEVEL-1)*4) || ename ename, mgr
FROM emp
WHERE job != 'ANALYST'
START WITH mgr IS null
CONNECT BY prior empno = mgr;

계층쿼리와 관련된 특수 함수
1. CONNECT_BY_ROOT : 최상의 노드와 마트
2. SYS_CONNECT_BY_PATH(컬럼, 구분자문자열)최상의 행부터 현재 행까지의 해당 컬럼의 값을 구분자로 검색
3. CONNECT_BY_ISLEAF : CHILD가 없는 LEAF NODE 여부 0 - FALSE/1 - TRUE
4. 시작글은 작성순서의 역순으로 
   답글은 직접 순서대로 결정
SELECT empno, LPAD(' ',(LEVEL-1)*4) || ename ename, mgr
FROM emp
WHERE job != 'ANALYST'
START WITH mgr IS null
CONNECT_BY_PRIOR empno = mgr;

SELECT seq, parent_seq, LPAD(' ',(LEVEL-4)*4
FROM board_test
START WITH parent_seq_IS NULL
CONNECT BY PRIOR seq = parent_seq;
ORDER BY seq DESC;
ORDER siblings BY SEQ DESC;
    ;  (형제)


SELECT * 
FROM
SELECT_BY_ROOT(seq) root_seq,
        seq, parent_seq, LPAD(' ',(LEVEL-1)*4) || title title
FROM board_test
START WITH parent_seq IS NULL
CONNECT BY PRIOR seq = parent_seq )
START WITH parent_seq IS NULL
CONNECT BY PRIOR seq = parent_seq
ORDER SIBLINGS BY root_seq DESC, seq ASC;


select *
from emp;

SELECT *
FROM emp
WHERE DEPTNO = 10 
and sal =  (select max(sal)
            from emp
            where deptno = 10);

시작글부터 관련 답글까지 그룹번호를 부여하기 위해 새로운 컬럼 추가
ALTER TABLE board_test ADD (gn NUMBER);
DESC board_test;

UPDATE board_test SET gn = 1
WHERE seq IN(1,9);

UPDATE board_test SET gn = 2
WHERE seq IN(2,3);

UPDATE board_test SET gn = 4
WHERE seq NOT IN(1,2,3,9);

commit;


분석함수 (window 함수)
    SQL에서 행간 연산을 지원하는 함수
    
    해당 행의 범위를 넘어서 다른 행과 연산이 가능
    . SQL의 약점 보완
    . 이전행의 특정 컬럼을 참조
    . 특정 범위의 행들의 컬럼의 합
    . 특정 범위의 행중 특정 컬럼을 기준으로 순위, 행번호 부여
    
    .SUM, COUNT, AVG, MAX, MIN
    .RANK, LEAD, LAG .......
    
  SELECT ename, sal, deptno, RANK() OVER(PARTITION BY deptno ORDER BY sal DESC) sal_rank 
  from emp
--  order by deptno, sal desc;
;

SELECT a.ename, a.sal, a.deptno, b.rank
FROM 
(SELECT a.*, ROWNUM rn
FROM 
(SELECT ename, sal, deptno
 FROM emp
 ORDER BY deptno, sal DESC) a ) a,

(SELECT ROWNUM rn, rank
FROM 
(SELECT a.rn rank
FROM
    (SELECT ROWNUM rn
     FROM emp) a,
     
    (SELECT deptno, COUNT(*) cnt
     FROM emp
     GROUP BY deptno
     ORDER BY deptno) b
 WHERE a.rn <= b.cnt
ORDER BY b.deptno, a.rn)) b
WHERE a.rn = b.rn;
    
    
    순위 관련된 함수 (중복값을 어떻게 처리하는가)
    RANK : 동일 값에 대해 동일 순위 부여하고, 후순위는 동일값만 건너뛴다.
            ex) 1등이 두명이면 다음은 3등
    DENSE_RANK : 동일 값에 대해 동일 순위 부여하고, 후순위는 이어서 부여한다
            ex) 1등이 2명이면 그 다음 순위는 2위
    ROW_NUMBER : 중복 없이 행에 순차적인 번호를 부여
    
    SELECT ename, sal, deptno, 
        RANK() OVER(PARTITION BY deptno ORDER BY sal DESC) sal_rank,
        DENSE_RANK() OVER(PARTITION BY deptno ORDER BY sal DESC) dense_rank,
        ROW_NUMBER() OVER(PARTITION BY deptno ORDER BY sal DESC) row_number
  from emp
  
SELECT WINDOW_FUCNTION([인자]) over ( [PARTITION BY 컬럼] [ORDER BY 컬럼] )
FROM ....

PARTITION BY : 영역 설정
ORDER BY (ASC/DESC) : 영역 안에서의 순서 정하기
;
SELECT EMPNO, ENAME, SAL, DEPTNO
,RANK() OVER (ORDER BY sal desc, empno ) sal_rank
,DENSE_RANK() OVER(ORDER BY sal desc, empno) sal_dense_rank
,ROW_NUMBER() OVER(ORDER BY sal desc, empno) sal_row_number
FROM emp;

SELECT emp.empno, emp.ename, emp.deptno, b.cnt
FROM emp,
    ( select deptno count(*) cnt
      from emp
      GROUP BY deptno) b
where emp.deptno = b.deptno
ORDER BY emp.deptno;

SELECT empno, ename, deptno,
        count(*) over (partition by deptno) cnt
from emp;